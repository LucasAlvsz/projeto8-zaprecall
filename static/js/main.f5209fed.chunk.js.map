{"version":3,"sources":["InitalPage.js","Header.js","Footer/StatusIcons.js","Footer/Footer.js","Decks/FlashCard.js","Decks/Deck.js","index.js"],"names":["InitialPage","pageStatus","deckSelected","decks","name","deck","question","answer","className","src","type","placeholder","defaultValue","map","key","value","onClick","Header","StatusIcons","statusIcon","Footer","numQuestions","numCompleted","statusIcons","zapFinished","notRememberAmount","length","i","Flashcard","questionNum","updateNumCompleted","updateStatusIcon","updateNotRememberAmount","status","useState","flashCardStatus","setFlashCardStatus","e","stopPropagation","Deck","App","setPageStatus","setNumCompleted","setStatusIcon","setDeckSelected","setNotRememberAmount","updatedPageStatus","upadetedDeckSelected","numCompletedUpdated","element","document","querySelector","render"],"mappings":"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","file":"static/js/main.f5209fed.chunk.js","sourcesContent":["export default function InitialPage({ pageStatus, deckSelected }) {\n    const decks = [{\n        name: \"JSX1\",\n        deck: [{\n            question: \"O que é JSX?\",\n            answer: \"Uma extensão de linguagem do JavaScript\"\n        }, {\n            question: \"O React é __\",\n            answer: \"Uma biblioteca JavaScript para construção de interfaces\"\n        }, {\n            question: \"Componentes devem iniciar com __\",\n            answer: \"Letra maiúscula\"\n        }, {\n            question: \"Podemos colocar __ dentro do JSX\",\n            answer: \"Expressões\"\n        }, {\n            question: \"O ReactDOM nos ajuda __ \",\n            answer: \"Interagindo com a DOM para colocar componentes React na mesma\"\n        }, {\n            question: \"Usamos o npm para __\",\n            answer: \"Gerenciar os pacotes necessários e suas dependências\"\n        }, {\n            question: \"Usamos props para __\",\n            answer: \"Passar diferentes informações para componentes\"\n        }, {\n            question: \"Usamos estado (state) para __\",\n            answer: \"Dizer para o React quais informações quando atualizadas devem renderizar a tela novamente\"\n        }\n        ]\n    }, {\n        name: \"JSX2\",\n        deck: [{\n            question: \"O que é JSX?\",\n            answer: \"Uma extensão de linguagem do JavaScript\"\n        }, {\n            question: \"O React é __\",\n            answer: \"Uma biblioteca JavaScript para construção de interfaces\"\n        }, {\n            question: \"Componentes devem iniciar com __\",\n            answer: \"Letra maiúscula\"\n        }, {\n            question: \"Podemos colocar __ dentro do JSX\",\n            answer: \"Expressões\"\n        }, {\n            question: \"O ReactDOM nos ajuda __ \",\n            answer: \"Interagindo com a DOM para colocar componentes React na mesma\"\n        }, {\n            question: \"Usamos o npm para __\",\n            answer: \"Gerenciar os pacotes necessários e suas dependências\"\n        }, {\n            question: \"Usamos props para __\",\n            answer: \"Passar diferentes informações para componentes\"\n        }, {\n            question: \"Usamos estado (state) para __\",\n            answer: \"Dizer para o React quais informações quando atualizadas devem renderizar a tela novamente\"\n        }\n        ]\n    }\n    ]\n    return (\n        <div className=\"initial-page\">\n            <img src=\"imgs/favicon.ico\" />\n            <h1 className=\"title\">ZapRecall</h1>\n            <input type=\"number\" placeholder=\"Digite sua meta de zaps...\"></input>\n            <select placeholder=\"eoq\">\n                <option defaultValue> Escolha seu deck</option>\n                {decks.map((deck, key) => {\n                    return (\n                        <option value={deck.deck} key={key}>{deck.name}</option>\n                    )\n                })}\n            </select>\n            <button onClick={() => {\n                pageStatus(\"not-inital\")\n                deckSelected(decks[0].deck)\n            }}>\n                Iniciar Reacall!\n            </button>\n        </div>\n    )\n}","export default function Header() {\n    return (\n        <header>\n            <img src=\"./imgs/favicon.ico\" />\n            <p>ZapRecall</p>\n        </header>\n    )\n}","export default function StatusIcons({ statusIcon }) {\n    return (\n        <img src={statusIcon} />\n    )\n}","import StatusIcons from \"./StatusIcons\"\nexport default function Footer({ numQuestions, numCompleted, statusIcons, zapFinished, notRememberAmount }) {\n    return (\n        <footer className={zapFinished ? \"zap-end\" : \"\"}>\n            {zapFinished\n                ? notRememberAmount > 0\n                    ? <>\n                        <div className=\"title\">\n                            <img src=\"./imgs/parabens.png\" />\n                            <p>PARABÉNS!</p>\n                        </div>\n                        <p>Você não esqueceu de nenhum flashcard!</p>\n                    </>\n                    : <>\n                        <div className=\"title\">\n                            <img src=\"./imgs/sad.png\" />\n                            <p>PUTZ!</p>\n                        </div>\n                        <p>Ainda faltaram alguns...\n                            Mas não desanime!</p>\n                    </>\n                : <p>{numCompleted}/{numQuestions} CONCLUÍDOS</p>\n            }\n            <div className=\"status-icon\">\n                {statusIcons.length !== 0 ? statusIcons.map((statusIcon, i) => {\n                    return (\n                        <StatusIcons\n                            statusIcon={statusIcon}\n                            key={i}\n                        />\n                    )\n                }) : \"\"}\n            </div>\n        </footer>\n    )\n}","import { useState } from \"react\"\nexport default function Flashcard({ questionNum, question, answer, updateNumCompleted, updateStatusIcon, updateNotRememberAmount}) {\n    function checkStatus(status) {\n        if (status === \"flash-card\") {\n            return (\n                <>\n                    <p>Pergunta {questionNum}</p>\n                    <img src=\"./imgs/play.svg\" />\n                </>\n            )\n        }\n        else if (status === \"opened-flash-card\") {\n            return (\n                <>\n                    <p>{question}</p>\n                    <img src=\"./imgs/turn.svg\" onClick={(e) => {\n                        e.stopPropagation()\n                        setFlashCardStatus(\"turned-flash-card\")\n                    }} />\n                </>\n            )\n        }\n        else if (status === \"turned-flash-card\") {\n            return (\n                <>\n                    <p>{answer}</p>\n                    <div className=\"buttons\">\n                        <button onClick={(e) => {\n                            e.stopPropagation()\n                            updateNumCompleted(1)\n                            updateNotRememberAmount(1)\n                            updateStatusIcon(\"./imgs/notRemember.svg\")\n                            setFlashCardStatus(\"not-remember\")\n                        }}>\n                            Não lembrei\n                        </button>\n                        <button onClick={(e) => {\n                            e.stopPropagation()\n                            updateNumCompleted(1)\n                            updateStatusIcon(\"./imgs/almostNotRemember.svg\")\n                            setFlashCardStatus(\"almost-not-remember\")\n                        }}>\n                            Quase não lembrei\n                        </button>\n                        <button onClick={(e) => {\n                            e.stopPropagation()\n                            updateNumCompleted(1)\n                            updateStatusIcon(\"./imgs/zap.svg\")\n                            setFlashCardStatus(\"zap\")\n                        }}>\n                            Zap!\n                        </button>\n                    </div>\n                </>\n            )\n        }\n        else if (status === \"not-remember\") {\n            return (\n                <>\n                    <p>Pergunta {questionNum}</p>\n                    <img src=\"./imgs/notRemember.svg\" />\n                </>\n            )\n        }\n        else if (status === \"almost-not-remember\") {\n            return (\n                <>\n                    <p>Pergunta {questionNum}</p>\n                    <img src=\"./imgs/almostNotRemember.svg\" />\n                </>\n            )\n        }\n        else if (status === \"zap\") {\n            return (\n                <>\n                    <p>Pergunta {questionNum}</p>\n                    <img src=\"./imgs/zap.svg\" />\n                </>\n            )\n        }\n    }\n    const [flashCardStatus, setFlashCardStatus] = useState(\"flash-card\")\n\n    return (\n        <div className={flashCardStatus} onClick={() => {\n            flashCardStatus === \"flash-card\"\n                ? setFlashCardStatus(\"opened-flash-card\")\n                : setFlashCardStatus(\"flash-card\")\n        }\n        }>\n            {checkStatus(flashCardStatus)}\n\n        </div>\n    )\n}\n\n","import { useState } from \"react\"\nimport Flashcard from \"./FlashCard\"\nexport default function Deck({ deck, updateNumCompleted, updateStatusIcon, updateNotRememberAmount }) {\n    return (\n        <div className=\"deck\">\n            {deck.map(({ question, answer }, questionNum) => {\n                return (\n                    <Flashcard\n                        questionNum={questionNum + 1}\n                        key={questionNum + 1}\n                        question={question}\n                        answer={answer}\n                        updateNumCompleted={updateNumCompleted}\n                        updateStatusIcon={updateStatusIcon}\n                        updateNotRememberAmount={updateNotRememberAmount}\n                    />\n                )\n            })\n            }\n        </div>\n    )\n}","import { render } from \"react-dom\";\nimport { useState } from \"react\"\nimport InitialPage from \"./InitalPage\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer/Footer\";\nimport Deck from \"./Decks/Deck\"\nfunction App() {\n    const [pageStatus, setPageStatus] = useState(\"initial\")\n    const [numCompleted, setNumCompleted] = useState(0)\n    const [statusIcons, setStatusIcon] = useState([])\n    const [deckSelected, setDeckSelected] = useState([])\n    const [notRememberAmount, setNotRememberAmount] = useState(0)\n    const zapFinished = false\n    return (\n        <>\n            {pageStatus === \"initial\"\n                ? <InitialPage\n                    pageStatus={updatedPageStatus => setPageStatus(updatedPageStatus)}\n                    deckSelected={upadetedDeckSelected => setDeckSelected(upadetedDeckSelected)}\n                />\n                : <>\n                    <Header />\n                    <main>\n                        <Deck\n                            deck={deckSelected}\n                            updateNumCompleted={numCompletedUpdated => setNumCompleted(numCompletedUpdated + numCompleted)}\n                            updateStatusIcon={updateStatusIcon => setStatusIcon([...statusIcons, updateStatusIcon])}\n                            updateNotRememberAmount={updateNotRememberAmount => {\n                                setNotRememberAmount(updateNotRememberAmount + notRememberAmount)\n                            }}\n                        />\n                    </main>\n                    <Footer\n                        numQuestions={deckSelected.length}\n                        numCompleted={numCompleted}\n                        statusIcons={statusIcons}\n                        zapFinished={numCompleted === deckSelected.length ? !zapFinished : zapFinished}\n\n                        notRememberAmount={notRememberAmount}\n                    />\n                </>\n            }\n        </>\n    )\n}\n\nconst element = document.querySelector(\".root\")\nrender(<App />, element)"],"sourceRoot":""}